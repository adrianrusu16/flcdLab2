Alphabet: [a-zA-Z_0-9]
    a. Upper (A-Z) and lower (a-z) case letters of the english alphabet
        letter ::= [a-zA-Z]
    b. Underscore
        underscore ::= "_"
    c. Decimal digits (0-9)
        nonZeroDigit ::= [1-9]
        digit ::= "0" | nonZeroDigit

1. Lexico:
    a. Special symbols:
        - operators + - / // * ** % = == != < <= => > | & ^ ~ ! << >>
            operator ::= "+" | "-" | "/" | "//" | "*" | "**" | "%" | "=" | "+=" | "-=" | "*=" | "/= | "//=" | "**=" |
                         | "==" | "!=" | "<" | "<=" | "=>" | ">" | "|" | "&" | "^" | "~" | "!" | "<<" | ">>"
        - separators {} [] () \n indent dedent :
           separator ::= "{" | "}" | "[" | "]" | "(" | ")" | ":" | "\n"
        - reserved words:
            reservedWords ::= "int" | "bool" | "str" | "list" | "def" | "return" | "if" | "else" | "in" | "True" |
                              "False" | "input" | "while" | "for" | "range" | "and" | "or" | "not" | "__main__"

    b. Identifiers
        -a sequence of letters and  digits, such that the first character is a letter; the rule is:
            identifier ::= letter {letter | digit}

    c. Constants
        - numbers
            int ::= 0 | ["+" | "-"] 0 "." digit {digit} | ["+" | "-"] nonZeroDigit {digit} ["." digit {digit}]

        - characters
            str ::= """ {letter | digit | underscore | whitespace} """

        - booleans
            bool ::= "True" | "False"




------------------------------------------- Syntax.in ---------------------------------------------




indent ::= '{'
dedent ::= '}'

program ::= functionList

functionList ::= function | function functionList

function ::= def IDENTIFIER "(" [parameter] | parameter "," parameter {"," parameter} ")" [returnType] ":"
parameter ::= IDENTIFIER [":" type]
returnType ::= "->" type

type ::= type1 | list"[" [type1] "]"
type1 ::= "int" | "bool" | string
string ::= "str" | fStr
fStr ::= "f"" { "str" | "{" expression "}"} """
listDecl ::= "[" [type1] "]"

cmpdStmt ::= indent stmtList dedent
stmtList ::= stmt | stmt stmtList
stmt ::= simpleStmt | structStmt
simpleStmt ::= assignStmt | ioStmt
assignStmt ::= IDENTIFIER assignOperator expression
assignOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "//=" | "**="
expression ::= expression ("+" | "-") term | term
term ::= term ("*" | "/" | "//") term1 | term1
term1 ::= term1 "**" factor | factor
factor ::= "(" expression ")" | IDENTIFIER
ioStmt ::= inputStmt | outputStmt
inputStmt ::= input "(" [string] ")"
outputStmt ::= print "(" IDENTIFIER ")"
structStmt ::= cmpdStmt | ifStmt | whileStmt | forRangeStmt

ifStmt ::= "if" condition ":" stmt [ "else" ":" stmt]
whileStmt ::= "while" condition ":" stmt
forRangeStmt ::= "for" identifier "in range(" [expression ","] expression ["," expression] "):" stmt

condition ::= expression RELATION expression
RELATION ::= "==" | "!=" | "<" | "<=" | "=>" | ">" | "and" | "or"



-------------------------------------------- Tokens.in -----------------------------------------------


+
-
/
//
%
*
**
=
+=
-=
/=
//=
**=
<
<=
==
=>
>
and
or
!
~
&
|
^
<<
>>
{
}
[
]
(
)
:
,
.
->
"
int
str
bool
True
False
def
return
if
else
while
for
in



----------------------------------------------- p1 ----------------------------------------------


def gcd(a: int, b: int) -> int:
{
    if b == 0:
        return a
    return gcd(b, a % b)
}


def main():
{
    a = int(input("a = "))
    b = int(input("b = "))

    print(gcd(a, b))
}


if __name__ == "__main__":
{
    main()
}



----------------------------------------------- p2 ----------------------------------------------


def isPrime(n: int) -> bool:
{
    if n < 2:
        return False
    if n < 4:
        return True

    for divider in range(5, n // 2 + 1, 2):
        if n % divider == 0:
            return False

    return True
}


def main():
{
    n = int(input("n = "))

    print(isPrime(n))
}


if __name__ == "__main__":
{
    main()
}



----------------------------------------------- p3 ----------------------------------------------


def numberSum(listOfNumbers: list[int]) -> int:
{
    summation = 0

    for number in listOfNumbers:
        summation += number

    return summation
}


def main():
{
    n = int(input("Number of Integers: "))

    listOfNumbers = []

    for index in range(n):
        listOfNumbers.append(int(input(f"#{index + 1}: ")))

    print(numberSum(listOfNumbers))
}


if __name__ == "__main__":
{
    main()
}



----------------------------------------------- p1err ----------------------------------------------


def gcd(a: int, b: int) -> int:
{
    if b == 0:
        return a
    return gcd(b, a % b)
}


def main():
{
    a = int(input('ă = "))  # 'ă' is not inside the interpretor's dictionary and strings must begin and end on double quotes <">
    b = int(input("b = "))

    print(gcd(a, b))
}


if __name__ == "__main__":
{
    main()
}
