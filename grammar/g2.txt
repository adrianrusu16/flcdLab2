{
  "nonTerminals": [
    "indent",
    "dedent",
    "program",
    "functionList",
    "function",
    "parameter",
    "returnType",
    "type",
    "type1",
    "string",
    "fStr",
    "listDecl",
    "cmpdStmt",
    "stmtList",
    "stmt",
    "simpleStmt",
    "assignStmt",
    "assignOperator",
    "expression",
    "parameterDecl",
    "term",
    "term1",
    "factor",
    "ioStmt",
    "inputStmt",
    "outputStmt",
    "structStmt",
    "ifStmt",
    "whileStmt",
    "forRangeStmt",
    "condition",
    "IDENTIFIER",
    "RELATION"
  ],
  "terminals": [
    "+",
    "-",
    "/",
    "//",
    "%",
    "*",
    "**",
    "=",
    "+=",
    "-=",
    "/=",
    "*=",
    "//=",
    "**=",
    "<",
    "<=",
    "==",
    "!=",
    "=>",
    ">",
    "and",
    "or",
    "{",
    "}",
    "[",
    "]",
    "(",
    ")",
    ":",
    ",",
    ".",
    "->",
    "\"",
    "int",
    "str",
    "bool",
    "True",
    "False",
    "def",
    "return",
    "if",
    "else",
    "while",
    "for",
    "in",
    "range",
    "input",
    "print",
    "list",
    "main"
  ],
  "start": "program",
  "productions": [
    "indent ::= '{'",
    "dedent ::= '}'",
    "program ::= 'main' indent functionList dedent",
    "functionList ::= function | function functionList",
    "function ::= 'def' IDENTIFIER '(' ')' ':' cmpdStmt | 'def' IDENTIFIER '(' ')' returnType ':' cmpdStmt | 'def' IDENTIFIER '(' parameterDecl ')' ':' cmpdStmt | 'def' IDENTIFIER '(' parameterDecl ')' returnType ':' cmpdStmt",
    "parameterDecl ::= parameter | parameter ',' parameterDecl",
    "parameter ::= IDENTIFIER | IDENTIFIER ':' type",
    "returnType ::= '->' type",
    "type ::= type1 | 'list' listDecl",
    "type1 ::= 'int' | 'bool' | 'str'",
    "listDecl ::= '[' ']' | '[' type1 ']'",
    "cmpdStmt ::= indent stmtList dedent",
    "stmtList ::= stmt | stmt stmtList",
    "stmt ::= simpleStmt | structStmt",
    "simpleStmt ::= assignStmt | ioStmt",
    "assignStmt ::= IDENTIFIER assignOperator expression",
    "assignOperator ::= '=' | '+=' | '-=' | '*=' | '/=' | '//=' | '**='",
    "expression ::= expression '+' term | expression '-' term | term",
    "term ::= term '*' term1 | term '/' term1 | term '//' term1 | term1",
    "term1 ::= term1 '**' factor | factor",
    "factor ::= '(' expression ')' | IDENTIFIER",
    "ioStmt ::= inputStmt | outputStmt",
    "inputStmt ::= 'input' '(' ')' | 'input' '(' string ')'",
    "outputStmt ::= 'print' '(' IDENTIFIER ')'",
    "structStmt ::= cmpdStmt | ifStmt | whileStmt | forRangeStmt",
    "ifStmt ::= 'if' condition ':' stmt | 'if' condition ':' stmt 'else' ':' stmt",
    "whileStmt ::= 'while' condition ':' stmt",
    "forRangeStmt ::= 'for' IDENTIFIER 'in' 'range' '(' expression ')' ':' stmt | 'for' IDENTIFIER 'in' 'range' '(' expression ',' expression ')' ':' stmt | 'for' IDENTIFIER 'in' 'range' '(' expression ',' expression ',' expression ')' ':' stmt",
    "condition ::= expression RELATION expression",
    "RELATION ::= '==' | '!=' | '<' | '<=' | '=>' | '>' | 'and' | 'or'"
  ]
}